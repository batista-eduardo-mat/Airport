//
//  MapViewController.swift
//  AiportFinder
//
//  Created by Eduardo Batista on 04/05/24.
//  Copyright (c) 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import MapKit

protocol MapDisplayLogic: AnyObject {
    func displaySomething(viewModel: Map.Something.ViewModel)
}

class MapViewController: UIViewController, MapDisplayLogic {
    var interactor: MapBusinessLogic?
    var router: (NSObjectProtocol & MapRoutingLogic & MapDataPassing)?
    
    // MARK: Object lifecycle
    
    @IBOutlet var airportsMap: MKMapView!
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = MapInteractor()
        let presenter = MapPresenter()
        let router = MapRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        if let airports = router?.dataStore?.airports {
            printMark(airports: airports)
        }
        
        if let lat = router?.dataStore?.currentLatitude, let lon = router?.dataStore?.currentLongitude, let radius = router?.dataStore?.radiusSelected {
            centerMap(lat: lat, lon: lon, radius: radius)
            markCurrentLocation(lat: lat, lon: lon)
        }
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    

    
    func printMark(airports: [Airport]) {
        for mark in airports {
            let markAnotation = MKPointAnnotation()
            markAnotation.title = mark.name
            markAnotation.coordinate = CLLocationCoordinate2D(latitude: mark.latitude, longitude: mark.longitude)
            airportsMap.addAnnotation(markAnotation)
        }
    }
    
    func centerMap(lat: Double, lon: Double, radius: Double) {
        let radiuslocationDistance = CLLocationDirection(floatLiteral: radius * 1000)
        airportsMap.centerToLocation(CLLocation(latitude: lat, longitude: lon), regionRadius: radiuslocationDistance)
    }
    
    func markCurrentLocation(lat: Double, lon: Double) {
        let markAnotation = MKPointAnnotation()
        markAnotation.title = "Current Location"
        markAnotation.coordinate = CLLocationCoordinate2D(latitude: lat, longitude: lon)
        airportsMap.addAnnotation(markAnotation)
    }
    
    func doSomething() {
        let request = Map.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: Map.Something.ViewModel) {
        //nameTextField.text = viewModel.name
    }
}

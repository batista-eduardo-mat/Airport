//
//  SearchViewController.swift
//  AiportFinder
//
//  Created by Eduardo Batista on 04/05/24.
//  Copyright (c) 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreLocation

protocol SearchDisplayLogic: AnyObject {
    func displayAirports(viewModel: Search.Data.ViewModel)
    func displayError(error: Error)
}

class SearchViewController: UIViewController, SearchDisplayLogic {
    var interactor: SearchBusinessLogic?
    var router: (NSObjectProtocol & SearchRoutingLogic & SearchDataPassing)?
    
    @IBOutlet var radiusLabel: UILabel!
    @IBOutlet var radiusSlider: UISlider!
    let locationManager = CLLocationManager()
    var currentLatitude: Double?
    var currentLongitude: Double?
    @IBOutlet var activityIndicator: UIActivityIndicatorView!
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = SearchInteractor()
        let presenter = SearchPresenter()
        let router = SearchRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        activityIndicator.isHidden = true
        locationManager.delegate = self
        validateAuthorizationStatus()
        locationManager.requestWhenInUseAuthorization()
        locationManager.requestLocation()
        
        
    }
    func validateAuthorizationStatus() {
        let authorizationStatus = locationManager.authorizationStatus
        
        switch authorizationStatus {
        case .notDetermined:
            self.locationManager.requestWhenInUseAuthorization()
        case .restricted:
            showAlert(title: "Latitud Longitud", message: "Allow location from settings to continue.")
        case .denied:
            showAlert(title: "Latitud Longitud", message: "Allow location from settings to continue.")
        case .authorizedAlways:
            break
        case .authorizedWhenInUse:
            break
        case .authorized:
            break
        @unknown default:
            showAlert(title: "Latitud Longitud", message: "Allow location from settings to continue.")
        }
    }
    @IBAction func sliderChanged(_ sender: UISlider) {
        self.radiusLabel.text = String(format: "%.0f", sender.value)
    }
    
    @IBAction func searchPressed(_ sender: UIButton) {
        activityIndicator.isHidden = false
        activityIndicator.startAnimating()
        doSearchAirports()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func doSearchAirports() {
        guard let lat = currentLatitude, let lon = currentLongitude else {
            showAlert(title: "Latitud Longitud", message: "Allow location from settings to continue.")
            DispatchQueue.main.async { [weak self] in
                self?.activityIndicator.stopAnimating()
                self?.activityIndicator.isHidden = true
            }
            return
        }
        let radiusSelected = String(format: "%.0f",radiusSlider.value)
        let request = Search.Data.Request(lat: String(lat), lon: String(lon), radius: radiusSelected)
        interactor?.doSearchAirports(request: request)
        
    }
    
    func displayAirports(viewModel: Search.Data.ViewModel) {
        
        DispatchQueue.main.async { [weak self] in
            self?.activityIndicator.stopAnimating()
            self?.activityIndicator.isHidden = true
        }
        self.router?.routeToTabBarController()
    }
    
    func displayError(error: any Error) {
        DispatchQueue.main.async { [weak self] in
            self?.activityIndicator.stopAnimating()
            self?.activityIndicator.isHidden = true
        }
        showAlert(title: "Error", message: "Server request error")
    }
    
}

extension SearchViewController: CLLocationManagerDelegate {
    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        if let location = locations.last {
            locationManager.stopUpdatingLocation()
            let latitude = location.coordinate.latitude
            let longitude = location.coordinate.longitude
            self.currentLatitude = latitude
            self.currentLongitude = longitude
        }
    }
    func locationManager(_ manager: CLLocationManager, didFailWithError error: any Error) {
        showAlert(title: "Error", message: "Error accessing current location.")
    }
}
